const TelegramBot = require('node-telegram-bot-api');
const { sequelize, DataTypes } = require('./db');
const Group = require('./models/Group')(sequelize, DataTypes);
const PendingGroup = require('./models/PendingGroup')(sequelize, DataTypes);

const token = '7600665438:AAHXDVepbk1QylzY9atnkqmkHXAGD5--TMY';
const bot = new TelegramBot(token, { polling: true });

const userState = {}; 
const ADMINS = [688251472]; // Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å)

async function sendGroupPage(chatId, page = 0) {
  const groupsPerPage = 5;
  const offset = page * groupsPerPage;

  const groups = await Group.findAll({ limit: groupsPerPage, offset });
  const totalGroups = await Group.count();
  const totalPages = Math.ceil(totalGroups / groupsPerPage);

  const buttons = groups.map(g => [
    { text: g.name, callback_data: `select_group_${g.id}` }
  ]);

  const navButtons = [];
  if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `group_page_${page - 1}` });
  if (page < totalPages - 1) navButtons.push({ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `group_page_${page + 1}` });
  if (navButtons.length) buttons.push(navButtons);

  buttons.push([{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'add_group' }]);

  bot.sendMessage(chatId, `üìö –ì—Ä—É–ø–ø—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}):`, {
    reply_markup: { inline_keyboard: buttons }
  });

  userState[chatId] = { page };
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:', {
    reply_markup: {
      keyboard: [['–ì—Ä—É–ø–ø—ã']],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  
  if (text.toLowerCase() === '–ì—Ä—É–ø–ø—ã') {
    return bot.sendMessage(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'group_choose' }],
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'add_group' }]
        ]
      }
    });
  }

  // –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
  if (userState[chatId] && userState[chatId] === 'awaiting_group_name') {
    const exists = await Group.findOne({ where: { name: text } });
    if (exists) {
      bot.sendMessage(chatId, '‚ùå –¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    } else {
      await PendingGroup.create({ name: text, requested_by: msg.from.id });
      bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É "${text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
    }
    delete userState[chatId];
  }
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === 'group_choose') {
    return sendGroupPage(chatId, 0);
  }

  if (data === 'add_group') {
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:');
    userState[chatId] = 'awaiting_group_name';
  }

  if (data.startsWith('group_page_')) {
    const page = parseInt(data.split('_')[2]);
    return sendGroupPage(chatId, page);
  }

  if (data.startsWith('accept_group_')) {
    const id = parseInt(data.split('_')[2]);
    const group = await PendingGroup.findByPk(id);
    if (!group) return bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    await Group.create({ name: group.name });
    await PendingGroup.destroy({ where: { id } });
    bot.sendMessage(chatId, `‚úÖ –ì—Ä—É–ø–ø–∞ "${group.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
  }

  if (data.startsWith('reject_group_')) {
    const id = parseInt(data.split('_')[2]);
    const group = await PendingGroup.findByPk(id);
    if (!group) return bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    await PendingGroup.destroy({ where: { id } });
    bot.sendMessage(chatId, `üö´ –ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É "${group.name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
  }
});

// /moderate: –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
bot.onText(/\/moderate/, async (msg) => {
  const chatId = msg.chat.id;
  if (!ADMINS.includes(msg.from.id)) {
    return bot.sendMessage(chatId, 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  const pending = await PendingGroup.findAll();

  if (pending.length === 0) {
    return bot.sendMessage(chatId, 'üì≠ –ó–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –Ω–µ—Ç.');
  }

  for (const group of pending) {
    await bot.sendMessage(chatId, `üîπ –ì—Ä—É–ø–ø–∞: ${group.name}`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_group_${group.id}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_group_${group.id}` },
          ],
        ],
      },
    });
  }
});